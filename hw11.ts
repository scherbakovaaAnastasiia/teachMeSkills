// Task 1

// –£ –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ('https://jsonplaceholder.typicode.com/posts').
// –ò –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ(–≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å).

// –ù–æ –ø–æ –∫–∞–∫–∏–º —Ç–æ –Ω–µ–æ–±—ä—è—Å–Ω–∏–º—ã–º –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–æ—Å—Ç—ã –Ω–æ–º–µ—Ä 3, 7, 15, 23. –í—ã–≥–ª—è–¥–∏—Ç –ø—Ä–æ—Å—Ç–æ. –ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å üêí
// –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –°–Ω–∞—á–∞–ª–∞ 15, –ø–æ—Ç–æ–º 23, –ø–æ—Ç–æ–º 7 –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º 3. –ê –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø–æ—Å—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è, –Ω–∞–º —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ  –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –æ—à–∏–±–∫—É.

// –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Å—Ç—ã, –∏–ª–∏ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ.

// ###### –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∑–∞–¥–∞—á—É –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
// - Promise chaining
// - Async / await

function getPosts(...numbers: number[]) {
  fetch(`https://jsonplaceholder.typicode.com/posts`)
    .then((response) => response.json())
    .then((posts) => {
      for (let num of numbers) {
        const post = posts[num - 1];
        if (post) console.log(post);
        else console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç ${num}`);
      }
    })
    .catch((error) => {
      console.log(new Error(error));
    });
}

getPosts(15, 23, 7, 20000);

async function getResponseJson() {
  const postJson = await fetch(`https://jsonplaceholder.typicode.com/posts`);
  return await postJson.json();
}

async function posts(...numbers: number[]) {
  try {
    const allPosts = await getResponseJson();
    for (let num of numbers) {
      const post = allPosts[num - 1];
      if (post) console.log(post);
      else console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç ${num}`);
    }
  } catch (error) {
    console.log(error);
  }
}

posts(15, 23, 7, 30000);

// Task 2

//     + –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ `https://jsonplaceholder.typicode.com/`
//     + –í–æ –≤–∫–ª–∞–¥–∫–µ `Resources` –ª–µ–∂–∏—Ç –∫–ª—é—á `/todos` - –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
//     + –î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ `getTodos` & `printTodos`
//         + –§—É–Ω–∫—Ü–∏—è `getTodos` –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
//         + –§—É–Ω–∫—Ü–∏—è `printTodos` —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç id –∏ title –æ–±—ä–µ–∫—Ç–∞ —Å –¥–µ–ª–æ–º
//         + –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

const url2 = "https://jsonplaceholder.typicode.com/todos";
async function getTodos() {
  const todosJson = await fetch(url2);
  return await todosJson.json();
}

//–ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±
async function printTodos() {
  const arr: Object[] = [];
  const allTodos = await getTodos();
  for (let i = 0; i < allTodos.length; i++) {
    const ob = {
      id: allTodos[i].id,
      title: allTodos[i].title,
    };
    arr.push(ob);
  }
  console.log(arr);
}
printTodos();

//–≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±
interface ITodo {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}
interface INewTodo {
  id: number;
  title: string;
}
async function printTodos1() {
  const allTodos: Array<ITodo> = await getTodos();
  const newArr = allTodos.map((value) => {
    const todo1: INewTodo = {
      id: value.id,
      title: value.title,
    };
    return todo1;
  });
  console.log(newArr);
}
printTodos1();
